/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/Qff90UenpD3
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { AvatarImage, AvatarFallback, Avatar } from "@/components/ui/avatar";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { useState } from "react"; // Import useState hook
import Link from "next/link";

export function Chatbot() {
    const [inputValue, setInputValue] = useState(""); // State to manage input value
    const [messages, setMessages] = useState([]);
    const handleInputChange = (event) => {
        setInputValue(event.target.value); // Update input value in the state
    };
    const sendMessage = async () => {
        console.log(inputValue);
        setMessages((prevMessages) => [...prevMessages, inputValue]);
        try {
            const response = await fetch("http://localhost:5000/query", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ query: inputValue }),
            });

            if (response.ok) {
                console.log("Message sent successfully");
                console.log(response);
                const json = await response.json();
                console.log(json);
                setMessages((prevMessages) => [...prevMessages, json.answer]);
            } else {
                console.error("Failed to send message");
                setMessages((prevMessages) => [...prevMessages, "error"]);
            }
        } catch (error) {
            console.error("Error sending message:", error);
            setMessages((prevMessages) => [...prevMessages, "error"]);
            console.log(messages);
        }
    };

    return (
        <div className="flex flex-col h-screen">
            <header className="bg-gray-900 text-white py-4 px-6 flex items-center justify-between">
                <div className="flex items-center">
                    <button className="p-2 bg-slate-600 rounded mr-4">
                        <Link href="/">
                            Go Back
                        </Link>
                    </button>
                    <h1 className="text-lg font-medium">SportIQ Chat</h1>
                </div>
                <div className="flex items-center">
                    <Avatar className="h-8 w-8 mr-2">
                        <AvatarImage
                            alt="User Avatar"
                            src="/placeholder-avatar.jpg"
                        />
                        <AvatarFallback>JD</AvatarFallback>
                    </Avatar>
                </div>
            </header>
            <main className="flex-1 bg-gray-100 dark:bg-gray-800 p-6 overflow-y-auto">
                <div className="space-y-4">
                    <div className="messages">
                        <ul className="flex flex-col">
                            {messages.map((message, index) => (
                                <li
                                    className={`inline-block ${
                                        index % 2 === 0
                                            ? "self-end"
                                            : "self-start"
                                    }`}
                                    key={index}
                                >
                                    <p
                                        className={`p-2 ${
                                            index % 2 === 0
                                                ? " rounded bg-blue-500 text-right mb-4"
                                                : "rounded bg-green-500 text-left mb-4"
                                        }`}
                                    >
                                        {message}
                                    </p>
                                </li>
                            ))}
                        </ul>
                    </div>
                </div>
            </main>
            <footer className="bg-gray-900 text-white py-4 px-6 flex items-center">
                <Input
                    className="flex-1 bg-gray-800 border-none rounded-lg py-2 px-4 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Type your message..."
                    type="text"
                    value={inputValue} // Bind input value to state
                    onChange={handleInputChange} // Handle input change
                />
                <Button
                    onClick={sendMessage}
                    className="ml-4 bg-blue-500 hover:bg-blue-600 text-white rounded-lg py-2 px-4"
                >
                    Send
                </Button>
            </footer>
        </div>
    );
}

function TextIcon(props) {
    return (
        <svg
            {...props}
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
        >
            <path d="M17 6.1H3" />
            <path d="M21 12.1H3" />
            <path d="M15.1 18H3" />
        </svg>
    );
}
