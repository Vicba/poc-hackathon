// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC1155/ERC1155.sol";

contract SportEducation is ERC1155{
    address public owner;
    // average score per address per lesson (we have 3 lessons for now)
    mapping(address => mapping(uint16=> uint16)) public averageScores;
    address[] public addresses;
    uint16[] public lessonIds;

    constructor() ERC1155("ipfs://QmZGkWrEa1xMnLveDsxH9EZTT6KtWrNHBAUKyHmtL8Rne3/{id}.json") {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "You are not the owner!");
        _;
    }

    function uploadScoreOfLesson(uint16 _lessonId, uint16 _score) public {
        // add address if it doesnt exist already
        bool isAddressInArray = false;
        for (uint256 i = 0; i < addresses.length; i++) {
            if (addresses[i] == msg.sender) {
                isAddressInArray = true;
            }
        }
        if (isAddressInArray == false) {
            addresses.push(msg.sender);
        }

        // add lessonId if it doesnt exist already
        bool isLessonIdInArray = false;
        for (uint256 i = 0; i < lessonIds.length; i++) {
            if (lessonIds[i] == _lessonId) {
                isLessonIdInArray = true;
            }
        }
        if (isLessonIdInArray == false) {
            lessonIds.push(_lessonId);
        }

        // add average score
        averageScores[msg.sender][_lessonId] = _score;
    }
    function getAverageScoreOfAddressOfLesson(address _address, uint16 _lessonId) public view returns (uint16) {
        return averageScores[_address][_lessonId];
    }
    function getAddresses() public view returns (address[] memory) {
        return addresses;
    }
    function getLessonIds() public view returns (uint16[] memory) {
        return lessonIds;
    }
    function mintCertificate() public {
        uint256 _averageScore = 0;
        for (uint256 i = 0; i < lessonIds.length; ++i) {
            _averageScore += averageScores[msg.sender][lessonIds[i]];
        }
        require(lessonIds.length >= 3, "No lessons enough");
        _averageScore = _averageScore / lessonIds.length;
        require(_averageScore >= 75, "not high enough score");
        _mint(msg.sender, 1, 1, "");
    }
}